"""
Bootstrap DraftChangeSets

DraftChange and DraftChangeSet are being introduced after Drafts, so we're going
to retroactively make DraftChanges for all the changes that were in our Learning
Packages.

This migration will try to reconstruct create, edit, reset-to-published, and
delete operations, but it won't be fully accurate because we only have the
create dates of the versions and the current state of active Drafts to go on.
This means we won't accurately capture when things were deleted and then reset,
or when reset and then later edited. Addressing this gap is a big part of why
we're creating DraftChangeSets in the first place.
"""
# Generated by Django 4.2.18 on 2025-03-13 10:29
import logging
from datetime import datetime, timezone

from django.db import migrations

logger = logging.getLogger(__name__)


def bootstrap_draft_change_sets(apps, schema_editor):
    """
    Create a fake DraftChangeSet that encompasses the state of current Drafts.
    """
    # We're copying the ChangeSetTypes here from the model, since we don't want
    # to accidentally import a later state of the model.
    CREATE = 1
    EDIT = 2
    DELETE = 3
    RESET_TO_PUBLISHED = 4

    LearningPackage = apps.get_model("oel_publishing", "LearningPackage")
    PublishableEntityVersion = apps.get_model("oel_publishing", "PublishableEntityVersion")

    Draft = apps.get_model("oel_publishing", "Draft")
    DraftChange = apps.get_model("oel_publishing", "DraftChange")
    DraftChangeSet = apps.get_model("oel_publishing", "DraftChangeSet")
    now = datetime.now(tz=timezone.utc)

    for learning_package in LearningPackage.objects.all().order_by("key"):
        logger.info(f"Creating bootstrap DraftChangeSets for {learning_package.key}")
        pub_ent_versions = PublishableEntityVersion.objects.filter(
                               entity__learning_package=learning_package
                           ).select_related("entity")

        # First cycle though all the simple create/edit operations...
        last_version_seen = {}  # PublishableEntity.id -> PublishableEntityVersion.id
        for pub_ent_version in pub_ent_versions.order_by("pk"):
            change_set_type = CREATE if pub_ent_version.version_num == 1 else EDIT

            change_set = DraftChangeSet.objects.create(
                learning_package=learning_package,
                changed_at=pub_ent_version.created,
                changed_by=pub_ent_version.created_by,
                change_set_type=change_set_type,
            )
            DraftChange.objects.create(
                change_set=change_set,
                entity=pub_ent_version.entity,
                old_version_id=last_version_seen.get(pub_ent_version.entity.id),
                new_version_id=pub_ent_version.id,
            )
            last_version_seen[pub_ent_version.entity.id] = pub_ent_version.id

        # Now that we've created change sets for create/edit operations, we look
        # at the latest state of the Draft model in order to determine whether
        # we need to apply deletes or resets.
        for draft in Draft.objects.filter(entity__learning_package=learning_package).order_by("entity_id"):
            last_version_id = last_version_seen.get(draft.entity_id)
            if draft.version_id == last_version_id:
                continue
            change_set_type = DELETE if draft.version_id is None else RESET_TO_PUBLISHED

            # We don't really know who did this or when, so we use None and now.
            change_set = DraftChangeSet.objects.create(
                learning_package=learning_package,
                changed_at=now,
                changed_by=None,
                change_set_type=change_set_type,
            )
            DraftChange.objects.create(
                change_set=change_set,
                entity_id=draft.entity_id,
                old_version_id=last_version_id,
                new_version_id=draft.version_id,
            )


def delete_draft_change_sets(apps, schema_editor):
    logger.info(f"Deleting all DraftChangeSets (reversre migration)")
    DraftChangeSet = apps.get_model("oel_publishing", "DraftChangeSet")
    DraftChangeSet.objects.all().delete()


class Migration(migrations.Migration):

    dependencies = [
        ('oel_publishing', '0004_draftchangeset_and_more'),
    ]

    operations = [
        migrations.RunPython(bootstrap_draft_change_sets, reverse_code=delete_draft_change_sets)
    ]
